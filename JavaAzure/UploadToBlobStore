/**
 * Copyright Microsoft Corporation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//package com.microsoft.azure.storage.blob.gettingstarted;
import java.io.*;
//import java.io.File;
//import java.io.FileInputStream;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import com.microsoft.azure.storage.CloudStorageAccount;
import com.microsoft.azure.storage.blob.BlobContainerPermissions;
import com.microsoft.azure.storage.blob.BlobContainerPublicAccessType;
import com.microsoft.azure.storage.blob.CloudBlobClient;
import com.microsoft.azure.storage.blob.CloudBlobContainer;
import com.microsoft.azure.storage.blob.CloudBlockBlob;
import com.microsoft.azure.storage.blob.ListBlobItem;
//import com.microsoft.azure.storage.util.Utility;

/**
 * This sample illustrates basic usage of the various Blob Primitives provided
 * in the Storage Client Library including CloudBlobContainer, CloudBlockBlob 
 * and CloudBlobClient.
 */
public class BlobBasics {

	/**
	 * Executes the sample.
	 * 
	 * @param args
	 *            No input args are expected from users.
	 * @throws URISyntaxException 
	 * @throws InvalidKeyException 
	 */
	public static void main(String[] args) throws InvalidKeyException, URISyntaxException {
		//Utility.printSampleStartInfo("BlobBasics");

		// Setup the cloud storage account.
		CloudStorageAccount account = CloudStorageAccount.parse("DefaultEndpointsProtocol=http;" +
			    "AccountName=reactonfly;" +
			    "AccountKey=UGMnwCrlJ5IJB9maLEThvKHbU4MkDnoPNXk9LFrJPkXIX5LR47tU7yPAWS6Zh3OC8h1xd/tYetCfpLC/a8fv8g==");

		// Create a blob service client
		CloudBlobClient blobClient = account.createCloudBlobClient();
		
		File f = new File("C:\\Users\\anxli\\Desktop\\Emotion\\test.txt");
		while (true) {
			if (f.exists() && f.isFile()) {
				System.out.println("hello");
				f.delete();
				File dir = new File("C:\\Users\\anxli\\Desktop\\Emotion\\images");
				try  {
					// Retrieve reference to a previously created container.
				    CloudBlobContainer container = blobClient.getContainerReference("images");
				    //File dir = new File("C:\\Users\\anxli\\Desktop\\Emotion\\images");
				    for (final File subFile : dir.listFiles()) {
				    	// Define the path to a local file.
					    //final String filePath = "C:\\Users\\anxli\\Desktop\\EMOTION\\happy.jpg";
					    final String filePath = subFile.getAbsolutePath();
					    // Create or overwrite the "myimage.jpg" blob with contents from a local file.
					    CloudBlockBlob blob = container.getBlockBlobReference(f.getName());
					    File source = new File(filePath);
					    blob.upload(new FileInputStream(source), source.length());
					    System.out.println(blob.getUri().toURL());
				    }     
				}
				catch (Throwable t) {
					t.printStackTrace();
				}
			} else {
				try {
					TimeUnit.SECONDS.sleep(2);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		//Utility.printSampleCompleteInfo("BlobBasics");
	}
}
